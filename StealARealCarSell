repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
repeat task.wait() until workspace:FindFirstChild("Bases") and game.Players.LocalPlayer:FindFirstChild("Backpack")

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local HumanoidRootPart = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
local PLACE_ID = game.PlaceId
local visitedServers = { [game.JobId] = true }
local currentState = "stealing"

local MyBase
repeat
	for _, base in ipairs(Workspace.Bases:GetChildren()) do
		local label = base:FindFirstChild("Title")
			and base.Title:FindFirstChild("NameGui")
			and base.Title.NameGui:FindFirstChild("TextLabel")
		if label and label.Text == LocalPlayer.Name then
			MyBase = base
			break
		end
	end
	task.wait(1)
until MyBase

local function serverHop()
	local req = syn and syn.request or http and http.request or http_request or request
	if not req then return end

	local servers = {}
	local cursor = nil

	repeat
		local url = ("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100"):format(PLACE_ID)
		if cursor then url = url .. "&cursor=" .. cursor end
		local response = req({ Url = url })
		if response and response.StatusCode == 200 then
			local data = HttpService:JSONDecode(response.Body)
			for _, server in ipairs(data.data) do
				if server.playing < server.maxPlayers and not visitedServers[server.id] and server.id ~= game.JobId then
					table.insert(servers, server.id)
				end
			end
			cursor = data.nextPageCursor
		else
			break
		end
	until not cursor or #servers >= 5

	if #servers > 0 then
		local selected = servers[math.random(1, #servers)]
		visitedServers[selected] = true
		queueonteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/LuaSecurity/Steal/refs/heads/main/StealARealCarSell'))()")
		TeleportService:TeleportToPlaceInstance(PLACE_ID, selected, LocalPlayer)
	end
end

MyBase.BuyHitbox.Size = Vector3.new(2500, 2500, 2500)

-- Check folders count and switch states
task.spawn(function()
	while true do
		local slots = MyBase:FindFirstChild("Slots")
		local count = 0
		if slots then
			for _, folder in ipairs(slots:GetChildren()) do
				if folder:IsA("Folder") and folder.Name == "Parts" then
					count += 1
				end
			end
		end

		if count == 10 then
			currentState = "selling"
		elseif count == 0 then
			currentState = "stealing"
		end

		task.wait(0.5)
	end
end)

-- Selling logic (priority)
task.spawn(function()
	while true do
		if currentState ~= "selling" then task.wait(0.5) continue end

		local slots = MyBase:FindFirstChild("Slots")
		if slots then
			for _, folder in ipairs(slots:GetChildren()) do
				if folder:IsA("Folder") and folder.Name == "Parts" then
					for _, obj in ipairs(folder:GetDescendants()) do
						if obj:IsA("ProximityPrompt") and obj.Name == "SellPrompt" then
							local parent = obj.Parent
							if parent and parent:IsA("BasePart") then
								HumanoidRootPart.CFrame = parent.CFrame + Vector3.new(0, 3, 0)
								task.wait(0.2)
								fireproximityprompt(obj, 1)
								task.wait(0.2)
							end
						end
					end
				end
			end
		end

		task.wait(1)
	end
end)

-- Stealing logic (only if not selling)
task.spawn(function()
	while true do
		if currentState ~= "stealing" then task.wait(1) continue end

		local found = false
		for _, base in ipairs(Workspace.Bases:GetChildren()) do
			if base ~= MyBase then
				for _, descendant in ipairs(base:GetDescendants()) do
					if descendant:IsA("ProximityPrompt") and descendant.Name == "SnatchPrompt" then
						local parent = descendant.Parent
						if parent and parent:IsA("BasePart") then
							HumanoidRootPart.CFrame = parent.CFrame + Vector3.new(0, 3, 0)
							task.wait(0.3)
							fireproximityprompt(descendant, 1)
							found = true
							break
						end
					end
				end
			end
			if found then break end
		end

		if not found then
			serverHop()
			break
		end

		task.wait(0.3)
	end
end)
